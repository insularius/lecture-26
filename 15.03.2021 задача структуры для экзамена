10.03.2921.cpp



#include <iostream>
#include <fstream>
#include <math.h>
#include <Windows.h>
#include <ctime>
#include <string>
#define BOOK_FILE "books.csv"
#define PI 3.14;
#define PRINT(x) cout <<(#x) << " = " << x << endl;
#define INPUT(x) cout << "Enter " << (#x) << ": "
#define IS_EVEN(x) (x%2==0)
#define MINX(x, y) (x<y?x:y)
#define QUAD(x) (x*x)
#define STEPEN(x, y) (x*y)
#include "function.h"
using namespace std;
#define DEF1
#define VERSION1
#define INTEGER  10
#define show ShowInt


struct Product
{
	string name;
	int cost;
	Details details;
	int details_count;
};

struct Details
{
	string color;
	string materials;
	string memory;
	string processor;
};



int main() 
{
	int n = CountInFile("text.txt");
	Product* products = new Product[n];
	RFF("text.txt", products, n);
	int c;
	cout << "Choose function: 1-create product, 2-print description, 3-print product, 4-print all products, 5-add product, 6-edit product, 7-delete product " << endl;
	cin >> c;
	switch (c) 
	{

	case 1:
		CreateProduct();
		break;
	case 2:
		Print(products, n);
	}
}



















////int const n = 5;
////void Show(int*& a, int n) {
////	int c;
////Choose:
////	cout << endl;
////	cout << "Choose function: 1-rand arr, 2-min element of arr, 3-max element of arr, 4-arr sort, 5-print arr " << endl;
////	cin >> c;
////	switch (c) {
////	case 1:
////		RandArray(a, n);
////		break;
////	case 2:
////		Min(a, n);
////		break;
////	case 3:
////		Max(a, n);
////		break;
////	case 4:
////		ArrSort(a, n);
////		break;
////	case 5:
////		PrintArray(a, n);
////		break;
////	}
////	goto Choose;
////}
////
////	int main() {
////
////	
////	int* a = new int[n];
////	Show(a, n);
////}








//show menu, чтобы вызывать определённые функции

//int main() {
//	
//#ifdef DEF1
//	cout << "workd" << endl;
//#endif
//
//
//
//}

//#ifdef VERSION1
//
//
//int main()
//{
//	cout << "Hello 1" << endl;
//}
//#else
//
//int main() {
//	cout << "Hello 2" << endl;
//}
//#endif














//int main()
//{
//    /*int width;
//    int age;
//    INPUT(width); cin >> age;
//    INPUT(age); cin >> age;*/
//  /*  int a; 
//    INPUT(a); cin >> a;
//    cout << boolalpha << "Is even? " << IS_EVEN(a) << endl;*/
//    //int number_1, number_2;
//    //INPUT(number_1); cin >> number_1;
//    //INPUT(number_2); cin >> number_2;
//    //cout << "Min: " << MINX(number_1, number_2) << endl;
//    ////int b; 
//    ////INPUT(b); cin >> b;
//    ////cout << "Quad: " << QUAD(b) << endl;
//    /////*int a;
//    ////INPUT(a); cin >> a;
//    ////CHET(a);*/
//   /* int a; 
//    int b;
//    INPUT(a); cin >> a;
//    INPUT(b); cin >> b;
//    cout << "Stepen: " << STEPEN(a, b);*/
//
//
//
//
//}







//void Read(string*& ps, int n) {
//    ifstream file("text.txt");
//    for (int i = 0; i < n; i++) {
//        getline(file, ps[i]);
//    }
//        
//    file.close();
//}
//
//string CorrectMusic(string s) {
//    while (s.find('_') != -1) s.replace(s.find('_'), 1, " ");
//    string artist, track;
//    artist = s.substr(0, s.find('-'));
//    track = s.substr(s.find('-') + 1, s.find('.') - s.find('-') - 1);
//    artist[0] = toupper(artist[0]);
//    track[0] = toupper(track[0]);
//    return (artist + " - " + track);
//}
//
//int main()
//{
//    int n = 5;
//    string* paths = new string[n];
//    Read(paths, n);
//    
//    for (int i = 0; i < n; i++) {
//        paths[i] = CorrectMusic(paths[i].substr(paths[i].rfind("/") + 1));
//    }
//    cout << paths[0] << endl;
//    cout << paths[1] << endl;
//   
//    
//    
//}






function.h


#pragma once
#include <string>
#include <iostream>
#include <fstream>
#include "function.cpp"
//#include "10.03.2021.cpp"
using namespace std;
string bag;
//double Sum(double a, double b);
//void RandArray(int*& a, int n);
//void PrintArray(int*& a, int n);
//void Min(int*& a, int n);
//void Max(int*& a, int n);
//void ArrSort(int*& a, int n);
//void EditArr(int*& a, int n, int index);

int CountInFile(string filename);
void RFF(string filename, Product*& a, int& n);
Product CreateProduct();
void Print(Product*& a, int& n);



//getline(file, temp, ';');
//pr[i].details_count = stoi(temp);
//pr[i].details = new Details[pr[i].details_count];
//for (int j = 0; j < pr[i].details_count; j++) {
//	getline(file, pr[i].details[j].name, ';');
//	getline(file, pr[i].details[j].description, ';')
//}






function.cpp



#include "function.h"
#include "10.03.2021.cpp"
//void RandArray(int*& a, int n)
//{
//	for (int i = 0; i < n; i++) {
//		a[i] = rand();
//	}
//}
//
//void PrintArray(int*& a, int n)
//{
//	for (int i = 0; i < n; i++) {
//		cout << a[i] << " ";
//	
//	}
//}
//
//void Min(int*& a, int n)
//{
//	int min = a[0];
//	for (int i = 1; i < n; i++) {
//		if (a[i] < min) min = a[i];
//	}
//	cout << min;
//}
//
//void Max(int*& a, int n)
//{
//	int max = a[0];
//	for (int i = 0; i < n; i++) {
//		if (a[i] > max) max = a[i];
//	}
//	cout << max;
//}
//
//void ArrSort(int*& a, int n)
//{
//	for (int i = 0; i < n; i++) {
//		for (int j = 0; j < n; j++) {
//			if (a[i] < a[j]) 
//			swap(a[i], a[j]);
//			
//		}			
//	}
//	
//}
//
//void EditArr(int*& a, int n, int index)
//{
//	for (int i = 0; i < n; i++) {
//		cin >> a[index];
//	}
//}

struct Product
{
	string name;
	int cost;
	Details details;
	int details_count;
};

struct Details
{
	string color;
	string materials;
	string memory;
	string processor;
};

void Write(Product a) {
	ofstream file("text.txt", ios::app);
	file << a.name << ";"
		<< a.cost << ";"
		<< a.details_count << ";"
		<< (a.details.color + ";" + a.details.materials + ";" + 
			a.details.memory + ";" + a.details.processor) << endl;
	file.close();
}

void Update(Product*& a, int& n, string filename) {
	ofstream file(filename);
	for (int i = 0; i < n; i++) {
		file << a[i].name << ";"
			<< a[i].cost << ";"
			<< a[i].details_count << ";"
			<< (a[i].details.color + ";" + a[i].details.materials + ";" +
				a[i].details.memory + ";" + a[i].details.processor) << endl;
	}
	file.close();
}

Product CreateProduct()
{
	Product a;
	cout << "Enter name of the product: "; getline(cin, a.name);
	cout << "Enter product cost: "; cin >> a.cost;
	cout << "Enter amount of details: "; cin >> a.details_count;
	getline(cin, bag);
	cout << "Enter color: "; getline(cin, a.details.color);
	cout << "Enter materials: "; getline(cin, a.details.materials);
	cout << "Enter memory: "; getline(cin, a.details.memory);
	cout << "Enter procesor: "; getline(cin, a.details.processor);
	return a;
}


void AddProduct(Product*& a, int& n, string filename) {
	Product* temp = new Product[n + 1];
	for (int i = 0; i < n; i++) {
		temp[i] = a[i];
		delete[]a;
		temp[n] = CreateProduct();
		a = temp;
		temp = nullptr;
		n++;
	}
	Update(a, n, filename);
}

void EditProduct(Product*& a, int& n, int index) //имя искать продукта
{
	cin >> index;
	for (int i = 0; i < n; i++) {
		a[index] = CreateProduct();
	}
	
}




void RemoveProduct(Product*& a, int& n) {
	string name; cin >> name;
	int index; cin >> index;
	Product* temp = new Product[n - 1];
	int k = 0;
	for (int i = 0; i < n; i++) {
		if (i!=index) {
			temp[k] = a[i];
			k++;
		}
	}
	delete[]a;
	a = temp;
	n--;

}





void DisplayProduct(Product a) {
	cout << a.name << ";"
		<< a.cost << ";"
		<< a.details_count << ";"
		<< (a.details.color + ";" + a.details.materials + ";" +
			a.details.memory + ";" + a.details.processor) << endl;
}

void SearchCost(Product*& a, int& n) {
	int cost;
	cin >> cost;
	for (int i = 0; i < n; i++) {
		if (cost <= a[i].cost)
			DisplayProduct(a[i]);
	}
}

void SearchColor(Product*& a, int& n) {
	string color;
	getline(cin, color);
	for (int i = 0; i < n; i++) {
		if (color == a[i].details.color)
			DisplayProduct(a[i]);
	}
}

void Print(Product*& a, int&n) {
	string product_name;
	for (int i = 0; i < n; i++) {
		if (product_name == a[i].name) {
			DisplayProduct(a[i]);
		}
	}
}

void PrintAll(Product*& a, int n) {
	for (int i = 0; i < n; i++) {
		cout << a[i].name << " "
			<< a[i].cost << " "
			<< a[i].details_count << " "
			<< (a[i].details.color + " " + a[i].details.materials + " " +
				a[i].details.memory + " " + a[i].details.processor) << endl;
	}

}


void RFF(string filename, Product*& a, int n) {
	
	ifstream file(filename);
	string temp;
	for (int i = 0; i < n; i++) {
		getline(file, a[i].name, ';');
		getline(file, temp, ';');
		a[i].cost = stoi(temp);
		getline(file, temp, ';');
		a[i].details_count = stoi(temp);
		getline(file, a[i].details.color, ';');
		getline(file, a[i].details.materials, ';');
		getline(file, a[i].details.memory, ';');
		getline(file, a[i].details.processor);
	}
	file.close();
}






text.txt


